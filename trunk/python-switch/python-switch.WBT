;************************************************************************
; python-switch.wbt
; 
;************************************************************************

; Which mode is currently being used ?

#DefineFunction pythonPathFromReg()
	IntControl(73, 2,0,0,0)

	keyName = "Applications\python.exe\shell\open\command"
	reg = RegExistValue(@REGCLASSES, keyName)
	if (reg == 0) then
		keyName = "Python.File\shell\open\command"
	endif
	path = RegQueryValue(@REGCLASSES, keyName)
	path = ItemExtract( 1, path, " ")
	for i = 1 to ItemCount( path, '"')
		_path = StrTrim( ItemExtract( i, path, '"'))
		if (StrLen(_path) > 0) then
			path = FilePath( _path)
			break
		endif
	next

	Return(path)
	
	:WBERRORHANDLER
	Error=LastError()
	Terminate(error!=3246,"Error %error%",StrCat(wberrorhandlerline,@CRLF,IntControl(34,error,0,0,0)))
	%wberrorhandlerassignment%="Not Found"
	IntControl(73, 2,0,0,0)
	Return
#EndFunction



#DefineFunction _isStackless( fpath)
	IntControl(73, 2,0,0,0)
	bool = @False; @False means normal Python, @True means stackless...
	if ( (DirExist( "%fpath%#python-251")) && (DirExist( "%fpath%_stackless-python-251")) ) then
		bool = @False; @False means normal Python, @True means stackless...
	else
		if ( (DirExist( "%fpath%_python-251")) && (DirExist( "%fpath%#stackless-python-251")) ) then
			bool = @True;  @False means normal Python, @True means stackless...
		endif
	endif
	Return(bool)
	
	:WBERRORHANDLER
	Error=LastError()
	Terminate(error!=3246,"Error %error%",StrCat(wberrorhandlerline,@CRLF,IntControl(34,error,0,0,0)))
	%wberrorhandlerassignment%="Not Found"
	IntControl(73, 2,0,0,0)
	Return
#EndFunction


#DefineFunction recursiveDirItemize(p)
	IntControl(73, 2,0,0,0)

	folders = DirItemize(p)
	pBase = ItemRemove( ItemCount( p, "\"), p, "\")
	for i = 1 to ItemCount( folders, @TAB)
		folder = StrTrim(ItemExtract( i, folders, @TAB))
		if (StrLen(folder) > 0) then
			folder = StrReplace( folder, StrCat(pBase,"\"), "")
			folders = ItemReplace("%pBase%\%folder%", i, folders, @TAB)
			list = recursiveDirItemize("%pBase%\%folder%\*.*")
			if (ItemCount( list, @TAB) > 0) then
				folders = StrCat(folders, @TAB, list)
			endif
		endif
	next

	Return(folders)
	
	:WBERRORHANDLER
	Error=LastError()
	Terminate(error!=3246,"Error %error%",StrCat(wberrorhandlerline,@CRLF,IntControl(34,error,0,0,0)))
	%wberrorhandlerassignment%="Not Found"
	IntControl(73, 2,0,0,0)
	Return
#EndFunction


#DefineFunction copyFilesFrom(sourcePath,frFolders,toPath,usingBiasPath,_mode)
	IntControl(73, 2,0,0,0)

	for i = 1 to ItemCount( frFolders, @TAB)
		folder = StrTrim(ItemExtract( i, frFolders, @TAB))
		if (StrLen(folder) > 0) then
			if (_mode == @False) then
				dest = StrReplace( folder, usingBiasPath, toPath)
				if (DirExist(dest) == @False) then
					DirMake(dest)
				endif
			else
				dest = sourcePath
			endif
			unbiasedFolder = StrCat(StrReplace( folder, usingBiasPath, ""),"\")
			if (unbiasedFolder == "\") then
				unbiasedFolder = ""
			endif
			files = FileItemize("%folder%\*.*")
			; Copy source files from Python folders to toPath
			sourceFiles = ""
			if (_mode == @False) then
				sourceFiles = files
				for k = 1 to ItemCount( sourceFiles, @TAB)
					aFile = StrTrim(ItemExtract( k, sourceFiles, @TAB))
					sourceFiles = ItemReplace("%sourcePath%%unbiasedFolder%%aFile%", k, sourceFiles, @TAB)
				next
			endif
			newFiles = files
			for k = 1 to ItemCount( newFiles, @TAB)
				aFile = StrTrim(ItemExtract( k, newFiles, @TAB))
				newFiles = ItemReplace("%usingBiasPath%%unbiasedFolder%%aFile%", k, newFiles, @TAB)
			next
			_toPath = "%toPath%%unbiasedFolder%"
			for k = 1 to ItemCount( sourceFiles, @TAB)
				aFile = StrTrim(ItemExtract( k, sourceFiles, @TAB))
				if (FileExist( aFile)) then
					_file = StrCat(_toPath,FileBaseName( aFile))
					FileCopy( aFile, _file, @False)
				endif
			next
			; Copy files to sourcePath
			_sourcePath = StrCat(sourcePath,unbiasedFolder)
			ErrorMode(@OFF)
			a = FileCopy( newFiles, _sourcePath, @False)
			ErrorMode(@CANCEL)
			if a == @False then
				Message( "Debug", "newFiles=(%newFiles%), _sourcePath=(%_sourcePath%)")
				break
			endif
		endif
	next

	if a == @True then
		; Rename both paths to indicate that the work has been done...
		ch = "#"
		newCh = "_"
		if (StrIndex( toPath, ch, 1, @Fwdscan) > -1) then
			ch = "_"
			newCh = "#"
		endif
		new_toPath = StrReplace( toPath, newCh, ch)
		DirRename( toPath, new_toPath)
		; Rename the other path to indicate that the work has been done...
		ch = "#"
		newCh = "_"
		if (StrIndex( usingBiasPath, ch, 1, @Fwdscan) > -1) then
			ch = "_"
			newCh = "#"
		endif
		new_usingBiasPath = StrReplace( usingBiasPath, ch, newCh)
		DirRename( usingBiasPath, new_usingBiasPath)
	endif

	Return
	
	:WBERRORHANDLER
	Error=LastError()
	Terminate(error!=3246,"Error %error%",StrCat(wberrorhandlerline,@CRLF,IntControl(34,error,0,0,0)))
	%wberrorhandlerassignment%="Not Found"
	IntControl(73, 2,0,0,0)
	Return
#EndFunction


_wname = "Python-Switch v1.0.0"
wname = "%_wname% (c)1978-2007 Hierarchical Applications Limited, All Rights Reserved."

_title = wname

fpath = pythonPathFromReg()

isStackless = _isStackless( fpath)

msg = "Python is currently "
if (isStackless == @False) then
	msg = StrCat(msg,"not-")
endif
msg = StrCat(msg,"Stackless.")

q = AskYesNo( msg, "Are you sure you want to change this now ?")
If q == @NO Then Exit

if (isStackless == @False) then
	_pfolder = "%fpath%_stackless-python-251\*.*"
	folders = recursiveDirItemize(_pfolder)
	pBase = StrCat(ItemRemove( ItemCount( _pfolder, "\"), _pfolder, "\"),"\")
	folders = ItemInsert( pBase, 0, folders, @TAB)
	copyFilesFrom(fpath,folders,"%fpath%#python-251\","%fpath%_stackless-python-251\",@False)
	_text = "Now using Stackless Python !"
else
	_pfolder = "%fpath%_python-251\*.*"
	folders = recursiveDirItemize(_pfolder)
	pBase = StrCat(ItemRemove( ItemCount( _pfolder, "\"), _pfolder, "\"),"\")
	folders = ItemInsert( pBase, 0, folders, @TAB)
	copyFilesFrom(fpath,folders,"%fpath%#stackless-python-251\","%fpath%_python-251\",@True)
	_text = "Now using normal Python !"
endif

Message( _title, _text)

